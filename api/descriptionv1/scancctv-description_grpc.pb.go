//**
//Description definition details
//*

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: scancctv/api/description/v1/scancctv-description.proto

package descriptionv1

import (
	context "context"
	commonv1 "github.com/scancctv/public-api/api/commonv1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Description_Describe_FullMethodName = "/scancctv.api.description.v1.Description/describe"
	Description_Echo_FullMethodName     = "/scancctv.api.description.v1.Description/Echo"
)

// DescriptionClient is the client API for Description service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DescriptionClient interface {
	Describe(ctx context.Context, in *InputFile, opts ...grpc.CallOption) (*FileDescription, error)
	Echo(ctx context.Context, in *commonv1.EchoRequest, opts ...grpc.CallOption) (*commonv1.EchoResponse, error)
}

type descriptionClient struct {
	cc grpc.ClientConnInterface
}

func NewDescriptionClient(cc grpc.ClientConnInterface) DescriptionClient {
	return &descriptionClient{cc}
}

func (c *descriptionClient) Describe(ctx context.Context, in *InputFile, opts ...grpc.CallOption) (*FileDescription, error) {
	out := new(FileDescription)
	err := c.cc.Invoke(ctx, Description_Describe_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *descriptionClient) Echo(ctx context.Context, in *commonv1.EchoRequest, opts ...grpc.CallOption) (*commonv1.EchoResponse, error) {
	out := new(commonv1.EchoResponse)
	err := c.cc.Invoke(ctx, Description_Echo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DescriptionServer is the server API for Description service.
// All implementations must embed UnimplementedDescriptionServer
// for forward compatibility
type DescriptionServer interface {
	Describe(context.Context, *InputFile) (*FileDescription, error)
	Echo(context.Context, *commonv1.EchoRequest) (*commonv1.EchoResponse, error)
	mustEmbedUnimplementedDescriptionServer()
}

// UnimplementedDescriptionServer must be embedded to have forward compatible implementations.
type UnimplementedDescriptionServer struct {
}

func (UnimplementedDescriptionServer) Describe(context.Context, *InputFile) (*FileDescription, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Describe not implemented")
}
func (UnimplementedDescriptionServer) Echo(context.Context, *commonv1.EchoRequest) (*commonv1.EchoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (UnimplementedDescriptionServer) mustEmbedUnimplementedDescriptionServer() {}

// UnsafeDescriptionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DescriptionServer will
// result in compilation errors.
type UnsafeDescriptionServer interface {
	mustEmbedUnimplementedDescriptionServer()
}

func RegisterDescriptionServer(s grpc.ServiceRegistrar, srv DescriptionServer) {
	s.RegisterService(&Description_ServiceDesc, srv)
}

func _Description_Describe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InputFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DescriptionServer).Describe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Description_Describe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DescriptionServer).Describe(ctx, req.(*InputFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _Description_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonv1.EchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DescriptionServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Description_Echo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DescriptionServer).Echo(ctx, req.(*commonv1.EchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Description_ServiceDesc is the grpc.ServiceDesc for Description service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Description_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "scancctv.api.description.v1.Description",
	HandlerType: (*DescriptionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "describe",
			Handler:    _Description_Describe_Handler,
		},
		{
			MethodName: "Echo",
			Handler:    _Description_Echo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "scancctv/api/description/v1/scancctv-description.proto",
}
